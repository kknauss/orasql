pause Press ENTER to create sequence ...

CREATE SEQUENCE PRINT_TRANSACTION_LOG_SEQ START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCYCLE;



pause Press ENTER to create table ...

CREATE TABLE PRINT_TRANSACTION_LOG
(
  PRINT_TRANSACTION_LOG_KEY NUMBER NOT NULL,
  TXNID VARCHAR2(30),
  MSGNBR NUMBER,
  OUTPUT VARCHAR2(4000)
);



PAUSE PRESS ENTER TO CREATE PROCEDURE PRINT_ANY2  ...

CREATE or replace PROCEDURE PRINT_ANY2(TXNID IN VARCHAR2, MSGNBR IN NUMBER, DATA IN ANYDATA) 
IS
  tn  VARCHAR2(61);
  str VARCHAR2(4000);
  chr VARCHAR2(1000);
  num NUMBER;
  dat DATE;
  rw  RAW(4000);
  res NUMBER;
BEGIN
  IF data IS NULL THEN
    INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, 'NULL value');
    RETURN;
  END IF;
  tn := data.GETTYPENAME();
  IF tn = 'SYS.VARCHAR2' THEN
    res := data.GETVARCHAR2(str);
    INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, SUBSTR(str,0,253));
  ELSIF tn = 'SYS.CHAR' then
    res := data.GETCHAR(chr);
    INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, SUBSTR(chr,0,253));
  ELSIF tn = 'SYS.VARCHAR' THEN
    res := data.GETVARCHAR(chr);
    INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, chr);
  ELSIF tn = 'SYS.NUMBER' THEN
    res := data.GETNUMBER(num);
    INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, num);
  ELSIF tn = 'SYS.DATE' THEN
    res := data.GETDATE(dat);
    INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, dat);
  ELSIF tn = 'SYS.RAW' THEN
    -- res := data.GETRAW(rw);
    -- DBMS_OUTPUT.PUT_LINE(SUBSTR(DBMS_LOB.SUBSTR(rw),0,253));
    INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, 'BLOB Value');
  ELSIF tn = 'SYS.BLOB' THEN
    INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, 'BLOB Found');
  ELSE
    INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, 'typename is ' || tn);
  END IF;
END PRINT_ANY2;
/

show errors




PAUSE PRESS ENTER TO CREATE PROCEDURE PRINT_LCR2  ...

CREATE or replace PROCEDURE PRINT_LCR2 (TXNID IN VARCHAR2, MSGNBR IN NUMBER, LCR IN SYS.ANYDATA) IS
  typenm VARCHAR2(61);
  ddllcr SYS.LCR$_DDL_RECORD;
  proclcr SYS.LCR$_PROCEDURE_RECORD;
  rowlcr SYS.LCR$_ROW_RECORD;
  res NUMBER;
  newlist SYS.LCR$_ROW_LIST;
  oldlist SYS.LCR$_ROW_LIST;
  ddl_text CLOB;
  chr VARCHAR2(4000);
BEGIN
  typenm := lcr.GETTYPENAME();

INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, 'type name: ' || TYPENM);

IF (TYPENM = 'SYS.LCR$_DDL_RECORD') 
THEN
  res := lcr.GETOBJECT(ddllcr);
  INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, 'source database: ' ||DDLLCR.GET_SOURCE_DATABASE_NAME);

  INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, 'owner: ' || ddllcr.GET_OBJECT_OWNER);
  INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, 'object: ' || ddllcr.GET_OBJECT_NAME);
  INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, 'is tag null: ' || ddllcr.IS_NULL_TAG);

  DBMS_LOB.CREATETEMPORARY(ddl_text, TRUE);
  DDLLCR.GET_DDL_TEXT(DDL_TEXT);
  INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, 'ddl: ' || DDL_TEXT);
  DBMS_LOB.FREETEMPORARY(ddl_text);
ELSIF (TYPENM = 'SYS.LCR$_ROW_RECORD') 
THEN
  RES := LCR.GETOBJECT(ROWLCR);
  INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, 'source database: ' || ROWLCR.GET_SOURCE_DATABASE_NAME);
  INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, 'Source SCN:' || ROWLCR.GET_SCN);
  INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, 'owner: ' || ROWLCR.GET_OBJECT_OWNER);
  INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, 'object: ' || ROWLCR.GET_OBJECT_NAME);
  INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, 'is tag null: ' || ROWLCR.IS_NULL_TAG);
  INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, 'command_type: ' || ROWLCR.GET_COMMAND_TYPE);
  OLDLIST := ROWLCR.GET_VALUES('OLD');

  FOR I IN 1..OLDLIST.COUNT 
  LOOP
    IF OLDLIST(I) IS NOT NULL 
    then
      INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, 'old(' || I || '): ' || OLDLIST(I).COLUMN_NAME );
      PRINT_ANY2(TXNID, MSGNBR, OLDLIST(I).DATA);
    END IF;
  END LOOP;

  newlist := rowlcr.GET_VALUES('NEW');

  FOR I IN 1..NEWLIST.COUNT 
  LOOP
    IF NEWLIST(I) IS NOT NULL 
    THEN
      INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, 'new(' || I || '): ' || NEWLIST(I).COLUMN_NAME);
      PRINT_ANY2(TXNID, MSGNBR, NEWLIST(I).DATA);
    END IF;
  END LOOP;
ELSE
  INSERT INTO PRINT_TRANSACTION_LOG values (PRINT_TRANSACTION_LOG_SEQ.NEXTVAL, TXNID, MSGNBR, 'Non-LCR Message with type ' || typenm);
END IF;
END PRINT_LCR2;
/

show errors


PAUSE PRESS ENTER TO CREATE PROCEDURE PRINT_TRANSACTION2 ...

CREATE or replace PROCEDURE PRINT_TRANSACTION2(LTXNID IN VARCHAR2) IS
  i NUMBER;
  txnid VARCHAR2(30);
  source VARCHAR2(128);
  msgcnt NUMBER;
  errno NUMBER;
  errmsg VARCHAR2(4000);
  LCR SYS.ANYDATA;
  LCROUTPUT VARCHAR2(4000);
BEGIN
  SELECT  LOCAL_TRANSACTION_ID,
          SOURCE_DATABASE,
          MESSAGE_COUNT,
          ERROR_NUMBER,
          ERROR_MESSAGE
  INTO txnid, source, msgcnt, errno, errmsg
  FROM DBA_APPLY_ERROR
  WHERE LOCAL_TRANSACTION_ID = LTXNID;

  FOR I IN 1..MSGCNT LOOP
    LCR := DBMS_APPLY_ADM.GET_ERROR_MESSAGE(I, TXNID);
    PRINT_LCR2 (TXNID, I, LCR);
  END LOOP;

	commit;
END PRINT_TRANSACTION2;
/

show errors
